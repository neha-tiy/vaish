<-----app.module.ts--->
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';


import{ ReactiveFormsModule,FormsModule} from '@angular/forms';
import { AppComponent } from './app.component';
@NgModule({
  declarations: [
    AppComponent,
    
  ],
  imports: [
    BrowserModule,
    ReactiveFormsModule,
    FormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }



<--------app.component.ts-------->
import { Component,OnInit } from '@angular/core';
import{FormBuilder,FormGroup,Validators} from '@angular/forms';
import {MustMatch} from './must-match.validator';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls:['./app.component.css']
})
export class AppComponent  implements OnInit{
  registerForm:FormGroup;
  submitted=false;
   constructor(private formBuilder:FormBuilder){}

   ngOnInit()
   {
   	this.registerForm=this.formBuilder.group({
         firstName:['',Validators.required],
         lastName:['',Validators.required],
         email:['',[Validators.required,Validators.email]],
         password:['',[Validators.required,Validators.minLength(6)]],
         confirmPassword:['',Validators.required] 
     },{
     	 validator: MustMatch('password','confirmPassword')
   		});
   }
 get f(){return this.registerForm.controls;}
 onsubmit(){
   this.submitted=true;
   if(this.registerForm.invalid)
   {
     return;
   }
   alert('Success:- \n\n'+JSON.stringify(this.registerForm.value))
  }
 }




<-----------app.component------------->
<div class="jumbotron">
  <div class="container">
    <div class="row">
      <div class="col-md-6 offset-md-3">
        <h2>Reactive Validation form</h2>

<form [formGroup]="registerForm" (ngSubmit)="onsubmit()">
  <div class="form-group">
 <label>FirstName</label>
 <input type="text" formControlName="firstName" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.firstName.errors}"/>
 <div *ngIf="submitted && f.firstName.errors" class="invalid-feedback">
 <div *ngIf="f.firstName.errors.required">First Name is required</div>
</div>
</div>
 
<!-- lastname -->
<div class="form-group">
 <label>LastName</label>
 <input type="text" formControlName="lastName" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.lastName.errors}"/>
 <div *ngIf="submitted && f.lastName.errors" class="invalid-feedback">
 <div *ngIf="f.lastName.errors.required">Last Name is required</div>
</div>
</div>

<!-- email -->
<div class="form-group">
 <label>Email</label>
 <input type="email" formControlName="email" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.email.errors}"/>
 <div *ngIf="submitted && f.email.errors" class="invalid-feedback">
 <div *ngIf="f.email.errors.required">Email is required</div>
 <div *ngIf="f.email.errors.email">Email must be a valid email address</div>
</div>
</div>

<!-- password-->
<div class="form-group">
 <label>Password</label>
 <input type="password" formControlName="password" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.password.errors}"/>
 <div *ngIf="submitted && f.password.errors" class="invalid-feedback">
 <div *ngIf="f.password.errors.required">Password is required</div>
 <div *ngIf="f.password.errors.minlength">Password must be at least 6 characters</div>
</div>
</div>

<!-- confirm password -->
 <div class="form-group">
 <label>confirmPassword</label>
 <input type="password" formControlName="confirmPassword" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.confirmPassword.errors}"/>
 <div *ngIf="submitted && f.confirmPassword.errors" class="invalid-feedback">
  <div *ngIf="f.confirmPassword.errors.required">Confirm Password is required</div>
 <div *ngIf="f.confirmPassword.errors.mustMatch">Passwords arent matching</div>
</div>
</div>

<div class="form-group">
 <button class="btn btn-primary">Register</button>
</div>

</form>
</div>
</div>
</div>
</div>




<-----------must-match.validator.ts------------>
import {FormGroup} from '@angular/forms';

export function MustMatch(controlName:string, matchingControlName)
{
 return(formGroup: FormGroup)=>
 {
 	const control=formGroup.controls[controlName];
 	const matchingControl= formGroup.controls[matchingControlName];

 	if(matchingControl.errors && !matchingControl.errors.mustMatch)
 	{
 		return;
 	}

 	if(control.value !== matchingControl.value)
 	{
 		matchingControl.setErrors({ mustMatch: true});
 	}
 	else{
 		matchingControl.setErrors(null);
 	}
  }
}


